<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml><!-- 解决No grammar constraints (DTD or XML Schema) referenced in the document 的问题-->
<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出, 这一行我设置为OFF,表示不记录log4j2本身的日志 
	monitorInterval: Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 -->
<Configuration status="off" monitorInterval="1800">

	<Properties>
		<!-- 日志基础路径 -->
		<Property name="BASEPATH">/usr/local/visionvera-eureka-server/logs</Property>
		<!-- 日志保存天数 -->
		<Property name="LOG_SAVED_DATE">10d</Property>
		<!-- 配置日志文件名 -->
		<Property name="LOG_FILENAME">eureka_all</Property>
		<Property name="LOG_FILENAME_ERROR">eureka_error</Property>
		<!-- 日志输出格式 -->
		<Property name="LOG_PATTERN_LAYOUT">%d{yyyy-MM-dd HH:mm:ss.SSS} [ %-5level ] [ %thread ] %class{36} - %M %L - %msg%xEx%n</Property>
	</Properties>

	<Appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<PatternLayout pattern="${LOG_PATTERN_LAYOUT}" />
		</Console>

		<!-- 设置日志格式并配置日志压缩格式(service.log.年份.gz) -->
		<!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFile_all" fileName="${BASEPATH}/${LOG_FILENAME}.log" filePattern="${BASEPATH}/${LOG_FILENAME}_%d{yyyy-MM-dd}.log" >
			<!-- 日志输出格式 -->
			<PatternLayout pattern="${LOG_PATTERN_LAYOUT}" />
			<Policies>
				<!-- 每1天更新一次，此处查阅网上和官方示例中，都是以小时出现，我测试是以天为单位。（官方文档中说明按item类型是否是小时，但没找到在哪里设置item类型）另有其他各类型策略，请参阅官方文档 -->
				<!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。
				SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志。 -->
				<TimeBasedTriggeringPolicy modulate="true" interval="1" />
			</Policies>
			<!-- 最多备份10天以内的日志，此处为策略限制，Delete中可以按自己需要用正则表达式编写 -->    
        	<!-- DefaultRolloverStrategy字段中加入max="30"经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量，并没有发现是网上流传的是最多保存多少个文件的限制，也或许是我写的有问题 -->    
         	<DefaultRolloverStrategy>
         		<!-- log4j2.5版本之后才支持 -->
        		<Delete basePath="${BASEPATH}" maxDepth="1">
                     <IfFileName glob="${LOG_FILENAME}_*.log" />
                     <!-- 日志保存天数 --> 
                     <IfLastModified age="${LOG_SAVED_DATE}" />
            	</Delete>    
            </DefaultRolloverStrategy>   
		</RollingFile>
		<RollingFile name="RollingFile_error" fileName="${BASEPATH}/${LOG_FILENAME_ERROR}.log" filePattern="${BASEPATH}/${LOG_FILENAME_ERROR}_%d{yyyy-MM-dd}.log" >
			<!-- 日志输出格式 -->
			<PatternLayout pattern="${LOG_PATTERN_LAYOUT}" />
			<!-- 只打印错误日志 -->
			<Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
			<Policies>
				<!-- 每1天更新一次，此处查阅网上和官方示例中，都是以小时出现，我测试是以天为单位。（官方文档中说明按item类型是否是小时，但没找到在哪里设置item类型）另有其他各类型策略，请参阅官方文档 -->
				<!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。
				SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志。 -->
				<TimeBasedTriggeringPolicy modulate="true" interval="1" />
			</Policies>
			<!-- 最多备份10天以内的日志，此处为策略限制，Delete中可以按自己需要用正则表达式编写 -->    
        	<!-- DefaultRolloverStrategy字段中加入max="30"经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量，并没有发现是网上流传的是最多保存多少个文件的限制，也或许是我写的有问题 -->    
         	<DefaultRolloverStrategy>
         		<!-- log4j2.5版本之后才支持 -->
        		<Delete basePath="${BASEPATH}" maxDepth="1">
                     <IfFileName glob="${LOG_FILENAME_ERROR}_*.log" />
                     <!-- 日志保存天数 --> 
                     <IfLastModified age="${LOG_SAVED_DATE}" />
            	</Delete>    
            </DefaultRolloverStrategy>   
		</RollingFile>

	</Appenders>

	<Loggers>
		<!-- 配置日志的根节点 -->
		<!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
		<root level="debug">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile_all" />
			<appender-ref ref="RollingFile_error" />
		</root>

		<!-- 第三方日志系统 -->
		<logger name="org.springframework" level="info" additivity="false"></logger>
		<logger name="org.springframework.context" level="info" additivity="false"></logger>
		<logger name="org.mybatis.spring" level="info" additivity="false"></logger>
		<logger name="org.apache.ibatis.io" level="info" additivity="false"></logger>
		<logger name="org.apache.ibatis.logging" level="info" additivity="false"></logger>
		<logger name="java.sql.Connection" level="debug" additivity="false"></logger>
		<logger name="java.sql.Statement" level="debug" additivity="false"></logger>
		<logger name="java.sql.PreparedStatement" level="debug" additivity="false"></logger>

	</Loggers>

</Configuration>
